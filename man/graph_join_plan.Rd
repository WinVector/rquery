% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join_controller.R
\name{graph_join_plan}
\alias{graph_join_plan}
\title{Build a draw-able specification of the join diagram}
\usage{
graph_join_plan(columnJoinPlan, ..., groupByKeys = TRUE, graphOpts = NULL)
}
\arguments{
\item{columnJoinPlan}{join plan}

\item{...}{force later arguments to bind by name}

\item{groupByKeys}{logical if true build key-equivalent sub-graphs}

\item{graphOpts}{options for graphViz}
}
\value{
grViz diagram spec
}
\description{
Please see \code{vignette('DependencySorting', package = 'rquery')} and \code{vignette('joinController', package= 'rquery')} for more details.
}
\examples{


if (requireNamespace("DBI", quietly = TRUE) && requireNamespace("RSQLite", quietly = TRUE)) {
  # note: employeeanddate is likely built as a cross-product
  #       join of an employee table and set of dates of interest
  #       before getting to the join controller step.  We call
  #       such a table "row control" or "experimental design."
  my_db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
  RSQLite::initExtension(my_db)
  tDesc <- example_employee_date(my_db)
  # fix order by hand, please see rquery::topo_sort_tables for
  # how to automate this.
  ord <- match(c('employeeanddate', 'orgtable', 'activity', 'revenue'),
               tDesc$tableName)
  tDesc <- tDesc[ord, , drop=FALSE]
  columnJoinPlan <- build_join_plan(tDesc, check= FALSE)
  # unify keys
  columnJoinPlan$resultColumn[columnJoinPlan$resultColumn=='id'] <- 'eid'
  # look at plan defects
  print(paste('problems:',
              inspect_join_plan(tDesc, columnJoinPlan)))
  diagramSpec <- graph_join_plan(columnJoinPlan)
  # to render as JavaScript:
  if(requireNamespace("DiagrammeR", quietly = TRUE)) {
    print(DiagrammeR::grViz(diagramSpec))
  }
  DBI::dbDisconnect(my_db)
  my_db <- NULL
}

}
\seealso{
\code{\link{describe_tables}}, \code{\link{build_join_plan}}, \code{\link{actualize_join_plan}}
}
